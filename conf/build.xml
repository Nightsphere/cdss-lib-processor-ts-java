<!-- TSCommandProcessor build file 
	Author  :  Kurt Tometich
	Date    :  01/24/2007
	Targets :
	 			clean
	 			compile
				compileTest
				test
	 			javadoc
				jar
	 			help
	 			
-->

<project name="buildTemplate" basedir="../" default="compile">

	<!-- === Set file separator depending on OS ===-->
	<condition property="sep" value="/">
	<and>
       		<os family="unix" />
	</and>
	</condition>
	<condition property="sep" value="\">
	<and>
       		<os family="windows" />
	</and>
	</condition>

	<!-- set the javac location for OS type -->
	<condition property="executable" value="/home/sharedLibs/j2sdk1.4.2_12/bin/javac">
		<and>
	       		<os family="unix" />
		</and>
	</condition>
	<condition property="executable" value="S:\develop\jdk_142\bin\javac">
		<and>
	       		<os family="windows" />
		</and>
	</condition>
		
	<!-- set the jhome variable depending on OS type -->
	<condition property="jhome" value="/home/sharedLibs/j2sdk1.4.2_12">
		<and>
		      <os family="unix" />
		</and>
	</condition>
	<condition property="jhome" value="S:\develop\jdk_142">
		<and>
		      <os family="windows" />
		</and>
	</condition>

	
	<!--============= General Properties =============-->
	<property name="src.dir"	     location="src"         />
	<property name="build.dir"	     location="build"       />
	<property name="dist.dir"        location="dist" />
	<property name="doc.dir"		 location="doc" />
	<property name="buildwork.dir"   location="build${sep}work"   />
	<property name="buildtest.dir"   location="build${sep}test"      />
	<property name="test.dir"	     location="test${sep}unit${sep}src"        />
	<property name="jdoc.dir"	     location="doc${sep}javadoc" />
	<property name="ext.dir"         location="externals"       />
	<property name="graphics.dir"    location="graphics"        />
	<property name="executable"  	 location="S:${sep}develop${sep}jdk_150${sep}bin${sep}javac" />
	<property name="classname"   	 value="RTi.TS.TSCommandProcessor" />
	<property name="testSuite"  	 value="RTi.TS.TSCommandProcessorTestSuite" />
	<property name="jarfname"    	 value="TSCommandProcessor_142.jar" />
	<property name="unitTest.dir"	 location="test${sep}unit" />
	<property name="regTest.dir"	 location="test${sep}regression" />
	<property name="command_file"    value="Regression.TSCommandProcessor" />
	<property name="proj_name"		 value="TSCommandProcessor" />

	
	<!--================ Dependencies ==================-->
	<property name="hydro"	 
		value="${ext.dir}${sep}HydroBaseDMI${sep}HydroBaseDMI_142.jar" />
	<property name="NWSRFS_DMI"	 
		value="${ext.dir}${sep}NWSRFS_DMI${sep}NWSRFS_DMI_142_Extended.jar" />
	<property name="RiversideDB"	 
		value="${ext.dir}${sep}RiversideDB_DMI${sep}RiversideDB_DMI_142.jar" />
	<property name="RTi_Common"	 
		value="${ext.dir}${sep}RTi_Common${sep}RTi_Common_142.jar" />
	<property name="StateCU"	 
		value="${ext.dir}${sep}StateCU${sep}StateCU_142.jar" />
	<property name="StateMod"	 
		value="${ext.dir}${sep}StateMod${sep}StateMod_142.jar" />
	<property name="TS_Services"
		value="${ext.dir}${sep}TS_Services${sep}TS_Services.jar" />
	<property name="Satmon"	 
			value="${ext.dir}${sep}SatmonSysDMI${sep}SatmonSysDMI_142.jar" />
	<property name="junit"
		value="${ext.dir}${sep}junit.jar" />
	<!--
	<property name="blowfish"
		value="${ext.dir}${sep}Blowfish_142.jar" />
	-->
	
	<!-- =========== Compiler Properties ===============-->
	<property name="compiler" value="modern" />
	
	<!-- set classpath -->
	<path id="classpath">
		<pathelement location="${junit}" />
		<pathelement location="${buildwork.dir}"/>
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${hydro}"/>
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		
		<pathelement location="."/>
	</path>
	
	<path id="classpathOp">
		<pathelement location="${hydro}"/>
		
		<pathelement location="${NWSRFS_DMI}"/>
		<pathelement location="${RiversideDB}"/>
		<pathelement location="${RTi_Common}"/>
		<pathelement location="${StateCU}"/>
		<pathelement location="${StateMod}"/>
		<pathelement location="${TS_Services}"/>
		<pathelement location="${Satmon}"/>
		<pathelement location="${junit}" />
		<pathelement location="${buildtest.dir}" />
		<pathelement location="${dist.dir}${sep}${jarfname}" />
		<pathelement location="."/>
	</path>
	
	<!-- current timestamp -->
	<tstamp>
	  <format property="TODAY" pattern="MM/dd/yyyy hh:mm" locale="en"/> 	
  	  <format property="jarDate" pattern="yyyy-MM-dd hh:mm" locale="en" />
	</tstamp>
	

<!--===================================================
	Target:   clean
	Function: cleans the build/work and build/test
	          directories to ensure a clean compilation
====================================================-->
<target name="clean" description="removes compiled files">
	
	<!-- delete build stuff -->
	<delete dir="${buildwork.dir}" />
	<delete dir="${build.dir}" />

	<!-- delete javadoc stuff -->
	<delete dir="${jdoc.dir}" />
		
	<delete>
		<fileset dir="test${sep}unit${sep}results" />
		<fileset dir="test${sep}operational${sep}results" />
		<fileset dir="test${sep}regression${sep}results" />
	</delete>
	
</target>

<!--===================================================
	Target:   compile
	Function: compiles code for this project and places
			  the compiled code in the build/work dir
====================================================-->
<target name="compile" description="compiles source code to build/work">
	
	<mkdir dir="${buildwork.dir}" />
	
	<javac srcdir 		= "${src.dir}"
           destdir 		= "${buildwork.dir}"
		   classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>

<!--========================================================
	Target: compileTest
	Function: to compile the code under test/src
==========================================================-->
<target name="compileTest" depends="compile"
	description="compiles all test source code into build/test dir">

	<mkdir dir="${build.dir}${sep}test" />
	
	<javac srcdir 		= "${test.dir}"
	       destdir 	    = "${build.dir}${sep}test"
           classpathref = "classpath"
           debug 		= "on"
	       fork 		= "yes"
	       listfiles 	= "true"
	       deprecation 	= "true"
	       executable 	= "${executable}"
	       compiler 	= "${compiler}"
	/>

</target>
	
<!--===================================================
	Target:   test
	Function: runs Junit tests and outputs results
====================================================-->
<target name="test" depends="compileTest"
	description="runs Junit test suite">

	<junit printsummary="yes" fork="yes" dir="conf">
		<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${buildcob.dir}${sep}cobertura.ser" />
		<formatter type="xml"/>
		<classpath refid="classpath" />
		<classpath refid="cobertura.classpath" />
		<test name="${testSuite}"
		 outfile="test${sep}unit${sep}results${sep}${proj_name}" />
	</junit>
	
</target>
	

<!--===================================================
	Target:   javadoc
	Function: generates the javadocs for this product
====================================================-->
<target name="javadoc" 
	description="creates html javadocs from source code">
	
	<!-- cleanup old javadocs -->
	<delete dir="${jdoc.dir}" />

	<!-- make dir jdocs --> 
	<mkdir dir="${jdoc.dir}" />

	<javadoc destdir="${jdoc.dir}" >
		<classpath refid="classpath"/>
		<fileset dir="${src.dir}${sep}${package}" >
    	  		<include name="*.java"/>
    		</fileset>
	</javadoc>	


</target>


<!--=====================================================
	Target: jar 
=======================================================-->
<target name="jar" depends="compile" 
	description="jars all class files into jar file in dist dir">
    
    <jar jarfile="${dist.dir}${sep}${jarfname}" basedir="${buildwork.dir}" >
	<manifest >
    	<attribute name="Author"    value="Riverside Technology, inc. (RTi)"/>
      	<attribute name="Address1"  value="2290 E. Prospect Road, Suite 1"/>
      	<attribute name="Address2"  value="Fort Collins, CO 80525"/>
        <attribute name="Phone"     value="970-484-7573"/>
	<attribute name="Web"       value="http://www.riverside.com"/>
	<attribute name="BuildDate" value="${jarDate}"/>
        <attribute name="Contents"  value="Contains TSCommandProcessor Classes"/>
      </manifest>

    </jar>
	
</target>
	

<!--===================================================
	Target:   help
	Function: prints out info on targets and properties
====================================================-->
<target name="help">

	<echo>
		
TARGET         FUNCTION
===========================================================
compile        compiles source code

compileTest    compiles the test source code

test           runs the unit tests for this product

clean          removes the build directories

javadoc        generates javadocs from source code

jar            copies class files into a single jar file in dist    
	
help           shows the help for this build file
===========================================================
	
	</echo>

</target>


</project>


